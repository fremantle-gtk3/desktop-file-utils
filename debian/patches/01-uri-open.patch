Index: desktop-file-utils/src/update-desktop-database.c
===================================================================
--- desktop-file-utils.orig/src/update-desktop-database.c
+++ desktop-file-utils/src/update-desktop-database.c
@@ -40,13 +40,22 @@
 #include "mimeutils.h"
 
 #define NAME "update-desktop-database"
-#define CACHE_FILENAME "mimeinfo.cache"
-#define TEMP_CACHE_FILENAME_PREFIX ".mimeinfo.cache.XXXXXX"
+#define MIME_CACHE_FILENAME "mimeinfo.cache"
+#define MIME_TEMP_CACHE_FILENAME_PREFIX ".mimeinfo.cache.XXXXXX"
+
+#define SCHEME_CACHE_FILENAME "schemeinfo.cache"
+#define SCHEME_TEMP_CACHE_FILENAME_PREFIX ".schemeinfo.cache.XXXXXX"
+
+#define SCHEME_GROUP_PREFIX "X-Osso-URI-Action Handler"
+#define SCHEME_GROUP_ACTIONS "X-Osso-URI-Actions"
+
+#define DESKTOP_ENTRY_GROUP "Desktop Entry"
 
 #define udd_print(...) if (!quiet) g_printerr (__VA_ARGS__)
 #define udd_verbose_print(...) if (!quiet && verbose) g_printerr (__VA_ARGS__)
 
 static FILE *open_temp_cache_file (const char  *dir,
+                                   const char  *name,
                                    char       **filename,
                                    GError     **error);
 static void add_mime_type (const char *mime_type, GList *desktop_files, FILE *f);
@@ -57,6 +66,9 @@ static void cache_desktop_file (const ch
 static void process_desktop_file (const char  *desktop_file,
                                   const char  *name,
                                   GError     **error);
+static void process_desktop_file_schemes (const char  *desktop_file,
+                                          const char  *name,
+                                          GError     **error);
 static void process_desktop_files (const char *desktop_dir,
                                    const char *prefix,
                                    GError **error);
@@ -65,6 +77,7 @@ static const char ** get_default_search_
 static void print_desktop_dirs (const char **dirs);
 
 static GHashTable *mime_types_map = NULL;
+static GHashTable *scheme_types_map = NULL;
 static gboolean verbose = FALSE, quiet = FALSE;
 
 static void
@@ -94,6 +107,18 @@ cache_desktop_file (const char  *desktop
   g_hash_table_insert (mime_types_map, g_strdup (mime_type), desktop_files);
 }
 
+static void
+cache_application_id (const char  *application_id,
+                      const char  *scheme_type,
+                      GError     **error)
+{
+  GList *application_ids;
+
+  application_ids = (GList *) g_hash_table_lookup (scheme_types_map, scheme_type);
+
+  application_ids = g_list_prepend (application_ids, g_strdup (application_id));
+  g_hash_table_insert (scheme_types_map, g_strdup (scheme_type), application_ids);
+}
 
 static void
 process_desktop_file (const char  *desktop_file,
@@ -177,6 +202,172 @@ process_desktop_file (const char  *deskt
   g_strfreev (mime_types);
 }
 
+static gboolean
+desktop_file_is_old_ver (const gchar *desktop_file)
+{
+  GKeyFile *key_file;
+  gboolean  ok;
+  gboolean  older_version = FALSE;
+
+  /* OK, here we don't search EVERY location because we know
+   * that the desktop will be found in ONE of the locations by
+   * g_key_file_load_from_data_dirs() and that it will look for
+   * the file in the order we want, i.e. $home/.local then
+   * $prefix/local, etc.
+   */
+
+  key_file = g_key_file_new ();
+
+  ok = g_key_file_load_from_file (key_file,
+                                  desktop_file,
+                                  G_KEY_FILE_NONE,
+                                  NULL);
+  if (ok) {
+    gchar *services;
+
+    /* If we find the 'X-Osso-Service' key in the 'Desktop
+     * Entry' group then we know that this is the older
+     * version of desktop file.
+     */
+    services = g_key_file_get_string (key_file,
+                                      DESKTOP_ENTRY_GROUP,
+                                      SCHEME_GROUP_ACTIONS,
+                                      NULL);
+    older_version = services != NULL;
+    g_free (services);
+  }
+
+  udd_verbose_print ("Desktop file:'%s' is %s version\n",
+                     desktop_file,
+                     older_version ? "older" : "newer");
+
+  g_key_file_free (key_file);
+
+  return older_version;
+}
+
+static void
+process_desktop_file_schemes (const char  *desktop_file,
+                              const char  *name,
+                              GError     **error)
+{
+  GError *load_error = NULL;
+  gboolean older_ver;
+
+  /* Handle schemes types second. */
+  udd_verbose_print ("Caching schemes for file:'%s'.\n", name);
+
+  older_ver = desktop_file_is_old_ver (desktop_file);
+  if (older_ver)
+  {
+    GKeyFile *key_file;
+    gchar **groups;
+    int prefix_len;
+    int i;
+    gboolean success;
+
+    key_file = g_key_file_new ();
+
+    success = g_key_file_load_from_file (key_file,
+                                         desktop_file,
+                                         G_KEY_FILE_NONE,
+                                         &load_error);
+
+    if (!success || load_error != NULL)
+    {
+      g_propagate_error (error, load_error);
+      g_key_file_free (key_file);
+      return;
+    }
+
+    groups = g_key_file_get_groups (key_file, NULL);
+    prefix_len = strlen (SCHEME_GROUP_PREFIX);
+
+    for (i = 0; groups && groups[i] != NULL; i++)
+    {
+      char *scheme_type;
+      const char *scheme_type_stripped;
+      int len;
+
+      len = strlen (groups[i]);
+
+      if (! strstr (groups[i], SCHEME_GROUP_PREFIX) ||
+          ! (len > prefix_len)) {
+        continue;
+      }
+
+      scheme_type = g_strdup (groups[i] + prefix_len);
+      scheme_type_stripped = g_strstrip (scheme_type);
+
+      udd_verbose_print ("Caching scheme:'%s' with desktop file:'%s'.\n",
+                         scheme_type_stripped, name);
+
+      cache_application_id (name, scheme_type_stripped, &load_error);
+      g_free (scheme_type);
+
+      /* Only set this error if a previous error has not been set */
+      if (load_error != NULL)
+      {
+        g_propagate_error (error, load_error);
+        g_key_file_free (key_file);
+        return;
+      }
+    }
+
+    g_strfreev (groups);
+    g_key_file_free (key_file);
+  }
+  else
+  {
+    GKeyFile *key_file;
+    gchar **keys;
+    gint i;
+
+    key_file = g_key_file_new ();
+    g_key_file_load_from_file (key_file,
+                               desktop_file,
+                               G_KEY_FILE_NONE,
+                               &load_error);
+    if (load_error != NULL)
+    {
+      g_key_file_free (key_file);
+      g_propagate_error (error, load_error);
+      return;
+    }
+
+    keys = g_key_file_get_keys (key_file,
+                                SCHEME_GROUP_ACTIONS,
+                                NULL,
+                                &load_error);
+    if (load_error != NULL)
+    {
+      g_key_file_free (key_file);
+      g_propagate_error (error, load_error);
+      return;
+    }
+
+    for (i = 0; keys && keys[i] != NULL; i++)
+    {
+      udd_verbose_print ("Caching scheme:'%s' with desktop file:'%s'.\n",
+                         keys[i], name);
+
+      cache_application_id (name, keys[i], &load_error);
+    }
+
+    g_strfreev (keys);
+
+    if (load_error != NULL)
+    {
+      g_key_file_free (key_file);
+      g_propagate_error (error, load_error);
+      return;
+    }
+
+    g_key_file_free (key_file);
+
+  }
+}
+
 static void
 process_desktop_files (const char  *desktop_dir,
                        const char  *prefix,
@@ -227,9 +418,8 @@ process_desktop_files (const char  *desk
         }
 
       name = g_strdup_printf ("%s%s", prefix, filename);
-      process_desktop_file (full_path, name, &process_error);
-      g_free (name);
 
+      process_desktop_file (full_path, name, &process_error);
       if (process_error != NULL)
         {
           if (!g_error_matches (process_error,
@@ -245,10 +435,17 @@ process_desktop_files (const char  *desk
                                  full_path);
             }
 
-          g_error_free (process_error);
-          process_error = NULL;
+          g_clear_error (&process_error);
+        }
+
+      process_desktop_file_schemes (full_path, name, &process_error);
+      if (process_error != NULL)
+        {
+          udd_verbose_print ("File '%s' lacks schemes\n", full_path);
+          g_clear_error (&process_error);
         }
 
+      g_free (name);
       g_free (full_path);
     }
 
@@ -256,14 +453,15 @@ process_desktop_files (const char  *desk
 }
 
 static FILE *
-open_temp_cache_file (const char *dir, char **filename, GError **error)
+open_temp_cache_file (const char *dir, const gchar  *name, char **filename,
+                      GError **error)
 {
   int fd;
   char *file;
   FILE *fp;
   mode_t mask;
 
-  file = g_build_filename (dir, TEMP_CACHE_FILENAME_PREFIX, NULL);
+  file = g_build_filename (dir, name, NULL);
   fd = g_mkstemp (file);
 
   if (fd < 0)
@@ -322,6 +520,30 @@ add_mime_type (const char *mime_type, GL
 }
 
 static void
+add_scheme_type (const char *scheme_type, GList *application_ids, FILE *f)
+{
+  GString *list;
+  GList *application_id;
+
+  list = g_string_new (scheme_type);
+  g_string_append_c (list, '=');
+  for (application_id = application_ids;
+       application_id != NULL;
+       application_id = application_id->next)
+    {
+      g_string_append (list, (const char *) application_id->data);
+
+      if (application_id->next != NULL)
+        g_string_append_c (list, ';');
+    }
+  g_string_append_c (list, '\n');
+
+  fputs (list->str, f);
+
+  g_string_free (list, TRUE);
+}
+
+static void
 sync_database (const char *dir, GError **error)
 {
   GError *sync_error;
@@ -331,7 +553,8 @@ sync_database (const char *dir, GError *
 
   temp_cache_file = NULL;
   sync_error = NULL;
-  tmp_file = open_temp_cache_file (dir, &temp_cache_file, &sync_error);
+  tmp_file = open_temp_cache_file (dir, MIME_TEMP_CACHE_FILENAME_PREFIX,
+                                   &temp_cache_file, &sync_error);
 
   if (sync_error != NULL)
     {
@@ -352,12 +575,44 @@ sync_database (const char *dir, GError *
   g_list_free (keys);
   fclose (tmp_file);
 
-  cache_file = g_build_filename (dir, CACHE_FILENAME, NULL);
+  cache_file = g_build_filename (dir, MIME_CACHE_FILENAME, NULL);
+  if (rename (temp_cache_file, cache_file) < 0)
+    {
+      g_set_error (error, G_FILE_ERROR,
+                   g_file_error_from_errno (errno),
+                   _("MIME Cache file '%s' could not be written: %s"),
+                   cache_file, g_strerror (errno));
+
+      unlink (temp_cache_file);
+    }
+  g_free (temp_cache_file);
+  g_free (cache_file);
+
+  /* Update: uriinfo.cache */
+  sync_error = NULL;
+  tmp_file = open_temp_cache_file (dir, SCHEME_TEMP_CACHE_FILENAME_PREFIX,
+                                   &temp_cache_file, &sync_error);
+
+  if (sync_error != NULL)
+    {
+      g_propagate_error (error, sync_error);
+      return;
+    }
+
+  fputs ("[", tmp_file);
+  fputs (SCHEME_GROUP_PREFIX, tmp_file);
+  fputs (" Cache]\n", tmp_file);
+
+  g_hash_table_foreach (scheme_types_map, (GHFunc) add_scheme_type, tmp_file);
+
+  fclose (tmp_file);
+
+  cache_file = g_build_filename (dir, SCHEME_CACHE_FILENAME, NULL);
   if (rename (temp_cache_file, cache_file) < 0)
     {
       g_set_error (error, G_FILE_ERROR,
                    g_file_error_from_errno (errno),
-                   _("Cache file \"%s\" could not be written: %s"),
+                   _("URI Cache file '%s' could not be written: %s"),
                    cache_file, g_strerror (errno));
 
       unlink (temp_cache_file);
@@ -375,6 +630,9 @@ update_database (const char  *desktop_di
   mime_types_map = g_hash_table_new_full (g_str_hash, g_str_equal,
                                           (GDestroyNotify)g_free,
                                           NULL);
+  scheme_types_map = g_hash_table_new_full (g_str_hash, g_str_equal,
+                                            (GDestroyNotify)g_free,
+                                            NULL);
 
   update_error = NULL;
   process_desktop_files (desktop_dir, "", &update_error);
@@ -389,6 +647,10 @@ update_database (const char  *desktop_di
     }
   g_hash_table_foreach (mime_types_map, (GHFunc) list_free_deep, NULL);
   g_hash_table_destroy (mime_types_map);
+
+  g_hash_table_foreach (scheme_types_map, (GHFunc) list_free_deep, NULL);
+  g_hash_table_destroy (scheme_types_map);
+
 }
 
 static const char **
@@ -473,6 +735,9 @@ main (int    argc,
   found_processable_dir = FALSE;
   for (i = 0; desktop_dirs[i] != NULL; i++)
     {
+      udd_verbose_print (_("Trying to update database for directory '%s'\n"),
+                         desktop_dirs[i]);
+
       error = NULL;
       update_database (desktop_dirs[i], &error);
 
